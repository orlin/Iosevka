import [add-common-feature add-feature add-lookup] from "./table-util"
extern Set

define MarkClasses {
	'above' 'below' 'overlay' 'slash' 'topright' 'bottomright'
	'trailing' 'lf' 'tieAbove' 'tieBelow' 'aboveBrace' 'belowBrace'
}

export : define [buildMarkMkmk sink glyphList] : begin
	define mark : add-feature sink 'mark'
	define mkmk : add-feature sink 'mkmk'
	add-common-feature sink mark
	add-common-feature sink mkmk

	local markLookupNames {}
	local mkmkLookupNames {}

	foreach markCls [items-of MarkClasses] : begin
		local [object markSubtable mkmkSubtable] : createMTSubtables glyphList { markCls }
		if ([objectIsNotEmpty markSubtable.marks] && [objectIsNotEmpty markSubtable.bases]) : begin
			local markLookup : add-lookup sink {.type 'gpos_mark_to_base' .subtables { markSubtable }}
			mark.lookups.push    markLookup
			markLookupNames.push markLookup

		if ([objectIsNotEmpty mkmkSubtable.marks] && [objectIsNotEmpty mkmkSubtable.bases]) : begin
			local mkmkLookup : add-lookup sink {.type 'gpos_mark_to_mark' .subtables { mkmkSubtable }}
			mkmk.lookups.push    mkmkLookup
			mkmkLookupNames.push mkmkLookup

	foreach markLookup [items-of markLookupNames] : foreach mkmkLookup [items-of mkmkLookupNames]
		sink.lookupDep.push { markLookup mkmkLookup }

define [createMTSubtables glyphList markClasses] : begin
	local markSubtable {.marks {.} .bases {.}}
	local mkmkSubtable {.marks {.} .bases {.}}
	local allowMarkClsSet : new Set markClasses
	foreach glyph [items-of glyphList] : begin
		createMarkInfo markSubtable.marks glyph allowMarkClsSet
		createMarkInfo mkmkSubtable.marks glyph allowMarkClsSet
		local isMark : objectIsNotEmpty glyph.markAnchors
		if isMark
			createBaseInfo mkmkSubtable.bases glyph allowMarkClsSet
			createBaseInfo markSubtable.bases glyph allowMarkClsSet
	return : object markSubtable mkmkSubtable

define [createBaseInfo sink glyph allowMarkClsSet] : begin
	local res {.}
	local pushed false
	foreach { markCls anchor } [pairs-of glyph.baseAnchors] : if [allowMarkClsSet.has markCls] : begin
		set pushed true
		set res.(markCls) {.x anchor.x .y anchor.y}
	if pushed : set sink.(glyph.name) res
	return pushed

define [createMarkInfo sink glyph allowMarkClsSet] : begin
	local m null
	foreach { markCls anchor } [pairs-of glyph.markAnchors] : if [allowMarkClsSet.has markCls] : begin
		set m {.class markCls .x anchor.x .y anchor.y}
	if m : set sink.(glyph.name) m
	return m

define [objectIsNotEmpty obj] : obj && [Object.keys obj].length